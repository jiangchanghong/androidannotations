//
// DO NOT EDIT THIS FILE, IT HAS BEEN GENERATED USING AndroidAnnotations 3.0.
//


package com.googlecode.androidannotations.helloworldeclipse;

import android.app.Activity;
import android.app.NotificationManager;
import android.content.Context;
import android.content.Intent;
import android.content.res.Resources;
import android.database.sqlite.SQLiteDatabase;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.util.Log;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnLongClickListener;
import android.view.View.OnTouchListener;
import android.view.ViewGroup.LayoutParams;
import android.view.WindowManager;
import android.widget.EditText;
import android.widget.TextView;
import com.googlecode.androidannotations.helloworldeclipse.R.bool;
import com.googlecode.androidannotations.helloworldeclipse.R.id;
import com.googlecode.androidannotations.helloworldeclipse.R.layout;
import com.googlecode.androidannotations.helloworldeclipse.R.string;
import org.androidannotations.api.BackgroundExecutor;
import org.androidannotations.api.SdkVersionHelper;
import org.androidannotations.api.view.HasViews;
import org.androidannotations.api.view.OnViewChangedListener;
import org.androidannotations.api.view.OnViewChangedNotifier;

public final class MyActivity_
    extends MyActivity
    implements HasViews, OnViewChangedListener
{

    private final OnViewChangedNotifier onViewChangedNotifier_ = new OnViewChangedNotifier();
    private Handler handler_ = new Handler(Looper.getMainLooper());

    @Override
    public void onCreate(Bundle savedInstanceState) {
        OnViewChangedNotifier previousNotifier = OnViewChangedNotifier.replaceNotifier(onViewChangedNotifier_);
        init_(savedInstanceState);
        super.onCreate(savedInstanceState);
        OnViewChangedNotifier.replaceNotifier(previousNotifier);
        setContentView(layout.my_activity);
    }

    private void init_(Bundle savedInstanceState) {
        OnViewChangedNotifier.registerOnViewChangedListener(this);
        Resources resources_ = this.getResources();
        helloFormat = resources_.getString(string.hello);
        someBoolean = resources_.getBoolean(bool.someBoolean);
        androidColor = resources_.getColor(com.googlecode.androidannotations.helloworldeclipse.R.color.androidColor);
        windowManager = ((WindowManager) this.getSystemService(Context.WINDOW_SERVICE));
        notificationManager = ((NotificationManager) this.getSystemService(Context.NOTIFICATION_SERVICE));
    }

    @Override
    public void setContentView(int layoutResID) {
        super.setContentView(layoutResID);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    @Override
    public void setContentView(View view, LayoutParams params) {
        super.setContentView(view, params);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    @Override
    public void setContentView(View view) {
        super.setContentView(view);
        onViewChangedNotifier_.notifyViewChanged(this);
    }

    public static MyActivity_.IntentBuilder_ intent(Context context) {
        return new MyActivity_.IntentBuilder_(context);
    }

    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if (((SdkVersionHelper.getSdkInt()< 5)&&(keyCode == KeyEvent.KEYCODE_BACK))&&(event.getRepeatCount() == 0)) {
            onBackPressed();
        }
        return super.onKeyDown(keyCode, event);
    }

    @Override
    public void onViewChanged(HasViews hasViews) {
        textView = ((TextView) hasViews.findViewById(id.myTextView));
        myEditText = ((EditText) hasViews.findViewById(id.myEditText));
        {
            View view = hasViews.findViewById(id.myButton);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        MyActivity_.this.myButtonClicked();
                    }

                }
                );
            }
        }
        {
            View view = hasViews.findViewById(id.startListActivity);
            if (view!= null) {
                view.setOnClickListener(new OnClickListener() {


                    @Override
                    public void onClick(View view) {
                        MyActivity_.this.startListActivity(view);
                    }

                }
                );
            }
        }
        {
            View view = hasViews.findViewById(id.startExtraActivity);
            if (view!= null) {
                view.setOnLongClickListener(new OnLongClickListener() {


                    @Override
                    public boolean onLongClick(View view) {
                        MyActivity_.this.startExtraActivity();
                        return true;
                    }

                }
                );
            }
        }
        {
            View view = hasViews.findViewById(id.myTextView);
            if (view!= null) {
                view.setOnTouchListener(new OnTouchListener() {


                    @Override
                    public boolean onTouch(View view, MotionEvent event) {
                        MyActivity_.this.myTextView(event);
                        return true;
                    }

                }
                );
            }
        }
    }

    @Override
    public int transactionalMethod(final SQLiteDatabase db, final int someParam) {
        db.beginTransaction();
        try {
            int result_ = MyActivity_.super.transactionalMethod(db, someParam);
            db.setTransactionSuccessful();
            return result_;
        } catch (RuntimeException e) {
            Log.e("MyActivity_", "Error in transaction", e);
            throw e;
        } finally {
            db.endTransaction();
        }
    }

    @Override
    public void showNotificationsDelayed() {
        handler_.postDelayed(new Runnable() {


            @Override
            public void run() {
                MyActivity_.super.showNotificationsDelayed();
            }

        }
        , 2000L);
    }

    @Override
    public void updateUi(final String message, final int color) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                MyActivity_.super.updateUi(message, color);
            }

        }
        );
    }

    @Override
    public void someBackgroundWork(final String name, final long timeToDoSomeLongComputation) {
        BackgroundExecutor.execute(new BackgroundExecutor.Task("", 0, "") {


            @Override
            public void execute() {
                try {
                    MyActivity_.super.someBackgroundWork(name, timeToDoSomeLongComputation);
                } catch (Throwable e) {
                    Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);
                }
            }

        }
        );
    }

    public static class IntentBuilder_ {

        private Context context_;
        private final Intent intent_;

        public IntentBuilder_(Context context) {
            context_ = context;
            intent_ = new Intent(context, MyActivity_.class);
        }

        public Intent get() {
            return intent_;
        }

        public MyActivity_.IntentBuilder_ flags(int flags) {
            intent_.setFlags(flags);
            return this;
        }

        public void start() {
            context_.startActivity(intent_);
        }

        public void startForResult(int requestCode) {
            if (context_ instanceof Activity) {
                ((Activity) context_).startActivityForResult(intent_, requestCode);
            } else {
                context_.startActivity(intent_);
            }
        }

    }

}
